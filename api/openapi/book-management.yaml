openapi: 3.0.1 # Specify OpenAPI version
info:
  title: Book Management API
  description: API for managing books, authors, and categories
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local server
paths:
  /v1/signup:
    post:
      summary: Signup a new user
      operationId: signupUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /v1/signin:
    post:
      summary: Signin a user
      operationId: signinUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      responses:
        '200':
          description: User signed in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /v1/author:
    post:
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '200':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
    put:
      summary: Update an author
      operationId: updateAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorUpdateRequest'
      responses:
        '200':
          description: Author updated successfully
  /v1/author/{authorId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Author deleted successfully
  /v1/authors:
    get:
      summary: List all authors
      operationId: listAuthors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsResponse'
  /v1/book:
    post:
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    put:
      summary: Update a book
      operationId: updateBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdateRequest'
      responses:
        '200':
          description: Book updated successfully
  /v1/book/{bookId}:
    delete:
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book deleted successfully
  /v1/book/borrow:
    post:
      summary: Borrow a book
      operationId: borrowBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowRequest'
      responses:
        '200':
          description: Book borrowed successfully
  /v1/book/return:
    post:
      summary: Return a book
      operationId: returnBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequest'
      responses:
        '200':
          description: Book returned successfully
  /v1/books:
    get:
      summary: List all books
      operationId: listBooks
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
  /v1/books/popular/{category}:
    get:
      summary: List popular books by category
      operationId: listPopularBooksByCategory
      parameters:
        - in: path
          name: category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of popular books by category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
  /v1/book/user/borrowed:
    get:
      summary: List user borrowed books
      operationId: listUserBorrowedBooks
      responses:
        '200':
          description: A list of user borrowed books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksResponse'
  /v1/category:
    post:
      summary: Create a new category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: Category created successfully
    put:
      summary: Update a category
      operationId: updateCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Category updated successfully
  /v1/category/{categoryId}:
    delete:
      summary: Delete a category
      operationId: deleteCategory
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully
  /v1/categories:
    get:
      summary: List all categories
      operationId: listCategories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
components:
  schemas:
    SignupRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
    SigninRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthorRequest:
      type: object
      properties:
        name:
          type: string
    AuthorUpdateRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    BookRequest:
      type: object
      properties:
        author_id:
          type: string
        category_id:
          type: string
        title:
          type: string
        stock:
          type: integer
    BookUpdateRequest:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        stock:
          type: integer
    BorrowRequest:
      type: object
      properties:
        book_id:
          type: string
        quantity:
          type: integer
    ReturnRequest:
      type: object
      properties:
        book_id:
          type: string
        quantity:
          type: integer
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
    CategoryUpdateRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    MessageResponse:
      type: object
      properties:
        message:
          type: string
    TokenResponse:
      type: object
      properties:
        token:
          type: string
    AuthorResponse:
      type: object
      properties:
        author:
          type: object
          properties:
            name:
              type: string
    AuthorsResponse:
      type: object
      properties:
        authors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
    BooksResponse:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              author:
                type: string
              category:
                type: string
              stock:
                type: integer
              borrowed:
                type: integer
              is_popular:
                type: boolean
    CategoriesResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string